types:
  imports:
    LeaderTime:
      base-type: any
      external:
        java: com.palantir.lock.v2.LeaderTime
    NanoTime:
      base-type: safelong
      external:
        java: com.palantir.common.time.NanoTime
    PartitionedTimestamps:
      base-type: any
      external:
        java: com.palantir.lock.v2.PartitionedTimestamps
    LockImmutableTimestampResponse:
      base-type: any
      external:
        java: com.palantir.lock.v2.LockImmutableTimestampResponse
    Lease:
      base-type: any
      external:
        java: com.palantir.lock.v2.Lease
    LockWatchStateUpdate:
      base-type: any
      external:
        java: com.palantir.lock.watch.LockWatchStateUpdate
    LockWatchRequest:
      base-type: any
      external:
        java: com.palantir.lock.watch.LockWatchRequest
  definitions:
    default-package: com.palantir.atlasdb.timelock.api
    objects:
      ConjureStartTransactionsRequest:
        fields:
          requestId: uuid
          requestorId: uuid
          numTransactions: integer
      ConjureStartTransactionsResponse:
        fields:
          immutableTimestamp: LockImmutableTimestampResponse
          timestamps: PartitionedTimestamps
          lease: Lease
      StartTransactionsWithWatchesRequest:
        fields:
          requestId: uuid
          requestorId: uuid
          numTransactions: integer
          lastKnownVersion: optional<safelong>
        docs: |
          An empty lastKnownVersion is treated as a request for a snapshot update. If the list of all events since last
          known version is not available anymore, we will attempt to return a snapshot update.
      StartTransactionsWithWatchesResponse:
        fields:
          immutableTimestamp: LockImmutableTimestampResponse
          timestamps: PartitionedTimestamps
          lease: Lease
          lockWatchUpdate: LockWatchStateUpdate
      GetCommitTimestampResponse:
        fields:
          commitTimestamp: safelong
          lockWatchUpdate: LockWatchStateUpdate
services:
  ConjureTimelockService:
    name: Timelock service
    default-auth: header
    package: com.palantir.atlasdb.timelock.api
    base-path: /tl
    endpoints:
      startTransactions:
        http: POST /st/{namespace}
        args:
          namespace: string
          request: ConjureStartTransactionsRequest
        returns: ConjureStartTransactionsResponse
      startTransactionsWithWatches:
        http: POST /stww/{namespace}
        args:
          namespace: string
          request: StartTransactionsWithWatchesRequest
        returns: StartTransactionsWithWatchesResponse
        docs: |
          The returned lock watch state the state taken atomically along with issuing the start timestamps. A failed
          update means the lock watch state changed too much while start timestamps were being issued, which is
          indicative of poorly registered lock watches.
      leaderTime:
        http: POST /lt/{namespace}
        args:
          namespace: string
        returns: LeaderTime
      getCommitTimestampWithWatches:
        http: POST /gctww/{namespace}
        args:
          namespace: string
          lastKnownVersion: safelong
        returns: GetCommitTimestampResponse
        docs: |
          Returns a fresh timestamp and the list of all lock watch events since the last known version. If we are unable
          to recover all of the requested events, the returned update will be a failure.
  ConjureLockWatchingService:
    name: Lock Watching service
    default-auth: header
    package: com.palantir.atlasdb.timelock.lock.watch
    base-path: /lw
    endpoints:
      startWatching:
        http: POST /sw/{namespace}
        args:
          namespace: string
          request: LockWatchRequest
      getWatchState:
        http: POST /ws/{namespace}
        args:
          namespace: string
          lastKnownVersion: optional<safelong>
        returns: LockWatchStateUpdate
